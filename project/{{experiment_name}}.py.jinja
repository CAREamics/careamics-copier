from careamics import CAREamist

from careamics.config import (
{% if algorithm == 'n2v' or algorithm == 'n2v2' %}
    create_n2v_configuration,
{% elif algorithm == 'care' %}
    create_care_configuration,
{% elif algorithm == 'n2n' %}
    create_n2n_configuration,
{% endif %}
)

# create a configuration
{% if algorithm == 'n2v' or algorithm == 'n2v2' %}
config = create_n2v_configuration(
    experiment_name={{ experiment_name }},
    data_type={{ data_type }},
    axes={{ axes }},
    patch_size=[
        {% if z_patch is defined and z_patch %}
            {{ z_patch }},
        {% endif %}
            {{ xy_patch }},
            {{ xy_patch }}
    ],
    batch_size={{ batch_size }},
    num_epochs={{ num_epochs }},
    # augmentations
    {% if mode == 'advanced' %}
        augmentations=[], # TODO  
    {% endif %},
    # channel related parameters
    {% if 'C' in axes %}
        n_channels={{ n_input_channels }},
    {% endif %}
)
{% elif algorithm == 'care' %}
config = create_care_configuration(
    experiment_name={{ experiment_name | tojson }},
    data_type={{ data_type | tojson }},
    axes={{ axes | tojson }},
    patch_size=[64, 64],
    batch_size=1,
    num_epochs=1,  
)
{% elif algorithm == 'n2n' %}
config = create_n2n_configuration(
    experiment_name={{ experiment_name | tojson }},
    data_type={{ data_type | tojson }},
    axes={{ axes | tojson }},
    patch_size=[64, 64],
    batch_size=1,
    num_epochs=1,  
)
{% else %}
# fallback or raise error
{% endif %}
# instantiate a careamist
careamist = CAREamist(config)

# train the model
train_data = np.random.randint(0, 255, (256, 256)).astype(np.float32)  
careamist.train(train_source=train_data)

# once trained, predict
pred_data = np.random.randint(0, 255, (128, 128)).astype(np.float32)
prediction = careamist.predict(source=pred_data)